// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  userRoles   UserRole[]
}

model User {
  id             Int             @id @default(autoincrement())
  name           String?
  lastName       String?
  email          String          @unique
  username       String
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isVerified     Boolean         @default(false)
  dateOfBirth    DateTime?
  avatar         String?
  experience     Int             @default(0)
  userRoles      UserRole[] // liste des rôles de l'utilisateur
  userEvents     UserEvent[] // liste des events auxquels l'utilisateur participe
  EventUserSteps EventUserStep[] // liste des étapes réalisées par l'utilisateur
  comments       Comment[] // liste des commentaires créés par l'utilisateur
  journey        Journey[] // liste des parcours créés par l'utilisateur
  events         Event[] // liste des events créés par l'utilisateur
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Event {
  id              Int             @id @default(autoincrement())
  authorId        Int
  journeyId       Int
  title           String
  image           String
  numberPlayerMin Int
  numberPlayerMax Int
  description     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isPrivate       Boolean         @default(false)
  accessCode      String?
  startAt         DateTime
  endAt           DateTime
  userEvents      UserEvent[]
  author          User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  journey         Journey         @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  EventUserStep   EventUserStep[]
}

model UserEvent {
  id      Int   @id @default(autoincrement())
  userId  Int
  eventId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Journey {
  id                  Int       @id @default(autoincrement())
  authorId            Int
  title               String
  description         String
  requirement         String
  treasure            String
  image               String
  estimatedDistance   Int
  estimatedDuration   Int?
  cluesDifficulty     Int
  physicalDifficulty  Int
  lastCompletion      DateTime?
  mobilityImpaired    String
  partiallySighted    String
  partiallyDeaf       String
  cognitivelyImpaired String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  steps               Step[]
  comments            Comment[]
  author              User      @relation(fields: [authorId], references: [id])
  events              Event[]
}

model Step {
  id             Int             @id @default(autoincrement())
  journeyId      Int
  puzzle         String
  answer         String
  hint           String
  picturePuzzle  String?
  pictureHint    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  latitude       Float
  longitude      Float
  address        String?
  city           String?
  postalCode     String?
  country        String?
  stepNumber     Int
  journey        Journey         @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  EventUserSteps EventUserStep[]
}

model EventUserStep {
  id         Int       @id @default(autoincrement())
  userId     Int
  stepId     Int
  eventId    Int
  startAt    DateTime  @default(now())
  endAt      DateTime?
  durationMs Int?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  step       Step      @relation(fields: [stepId], references: [id], onDelete: Cascade)
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  authorId  Int
  content   String
  rating    Int?
  journeyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  journey   Journey  @relation(fields: [journeyId], references: [id], onDelete: Cascade)
}
